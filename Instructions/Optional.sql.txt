-- Created for Stock by Attributes 1.5.2
-- Use at your own risk!
-- Backup your databases prior to using or making any changes.
-- This SQL will create entries in the new products_with_attributes_stock table based on current products that have attributes.
-- By default it will set each of the new entries to the quantity found in the product entry.
-- SAMPLE ONLY, you are responsible to verify data is correct and acceptable for your site.

-- NOTES: 
--
--	No changes to table names (prefix) are required if you use the SQL Query Executor from the admin (Tools\Install SQL Patches). 
--
--	But, If you use a third party database tool, such as HeidiSQL, then you should read the following.
-- 		The table names will need to be changed if your database uses a prefix such as 'zen_'.
--		Examples: 
--				Change: products_with_attributes_stock 
--					To: zen_products_with_attributes_stock 
--				Change: products 
--					To: zen_products.
--				Change: products_attributes 
--					To: zen_products_attributes.
--				Change: products_options_values 
--					To: zen_products_options_values.

-- The following command can be used to REMOVE "multiple" attribute combinations from the database Use with Extreme Caution!
-- This is a destructive command and should be tested for proper function and results on a TEST copy of the database!
-- delete from products_with_attributes_stock where stock_attributes like '%,%';

-- Insert script to support duplicate entries
-- Paste the following into 'SQL Query Executor' (Tools\Install SQL Patches).


	------------------------------------------------------------------------------------------------------
	-- This will add all the products attributes:

	INSERT INTO products_with_attributes_stock (products_id, stock_attributes, quantity)
	
		SELECT p.products_id, pa.products_attributes_id, p.products_quantity
		FROM products p
			LEFT JOIN products_attributes pa ON (p.products_id = pa.products_id)
			LEFT JOIN products_options_values pv ON (pa.options_values_id = pv.products_options_values_id)
		WHERE pa.products_attributes_id is not null
			AND pa.options_values_id > 0
		ORDER BY p.products_id, pa.products_attributes_id
	
	ON DUPLICATE KEY UPDATE
		`products_id` = products_with_attributes_stock.products_id;

								
	------------------------------------------------------------------------------------------------------
	-- This will add only the read-only product attributes:
	
	INSERT INTO products_with_attributes_stock (products_id, stock_attributes, quantity)
	
		SELECT p.products_id, pa.products_attributes_id, p.products_quantity
		FROM products p
			LEFT JOIN products_attributes pa ON (p.products_id = pa.products_id)
			LEFT JOIN products_options_values pv ON (pa.options_values_id = pv.products_options_values_id)
		WHERE pa.products_attributes_id is not null
			AND pa.options_values_id > 0
			AND pa.attributes_display_only = 1
		ORDER BY p.products_id, pa.products_attributes_id
	
	ON DUPLICATE KEY UPDATE
		`products_id` = products_with_attributes_stock.products_id;
	
	
	------------------------------------------------------------------------------------------------------
	-- This will only add the product attributes that are NOT read-only:
	
	INSERT INTO products_with_attributes_stock (products_id, stock_attributes, quantity)
	
		SELECT p.products_id, pa.products_attributes_id, p.products_quantity
		FROM products p
			LEFT JOIN products_attributes pa ON (p.products_id = pa.products_id)
			LEFT JOIN products_options_values pv ON (pa.options_values_id = pv.products_options_values_id)
		WHERE pa.products_attributes_id is not null
			AND pa.options_values_id > 0
			AND pa.attributes_display_only = 0
		ORDER BY p.products_id, pa.products_attributes_id
	
	ON DUPLICATE KEY UPDATE
		`products_id` = products_with_attributes_stock.products_id;

								
	------------------------------------------------------------------------------------------------------
	--Default version used in script.
	-- This will only add the product attributes that are NOT read-only AND are NOT the new "SBA" selections:
								
	INSERT INTO products_with_attributes_stock (products_id, stock_attributes, quantity) 
	
		SELECT p.products_id, pa.products_attributes_id, p.products_quantity
		FROM products p
			LEFT JOIN products_attributes pa ON (p.products_id = pa.products_id)
			LEFT JOIN products_options_values pv ON (pa.options_values_id = pv.products_options_values_id)
			LEFT JOIN products_options_values_to_products_options povpo ON (pv.products_options_values_id = povpo.products_options_values_id)
			LEFT JOIN products_options po ON(povpo.products_options_id = po.products_options_id)
			LEFT JOIN products_options_types pot ON (po.products_options_type = pot.products_options_types_id)
			
		WHERE pa.products_attributes_id is not null
			AND pa.options_values_id > 0
			AND pa.attributes_display_only = 0
			AND pot.products_options_types_name NOT LIKE "SBA%"
		ORDER BY p.products_id, pa.products_attributes_id
	
	ON DUPLICATE KEY UPDATE
		`products_id` = products_with_attributes_stock.products_id;

